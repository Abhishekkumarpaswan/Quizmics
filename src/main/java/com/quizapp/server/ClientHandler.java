package com.quizapp.server;

import com.quizapp.model.Quiz;
import com.quizapp.model.Room;
import com.quizapp.model.Result;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ClientHandler extends Thread {
    private Socket clientSocket;
    private Connection connection;
    private PrintWriter out;
    private BufferedReader in;
    private int userId;
    private int roomId;

    public ClientHandler(Socket socket, Connection connection) {
        this.clientSocket = socket;
        this.connection = connection;
    }

    @Override
    public void run() {
        try {
            out = new PrintWriter(clientSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                // Handle client requests
                String[] request = inputLine.split(":");
                switch (request[0]) {
                    case "LOGIN":
                        handleLogin(request[1], request[2]);
                        break;
                    case "CREATE_QUIZ":
                        handleCreateQuiz(request[1], request[2]);
                        break;
                    case "GET_QUIZZES":
                        handleGetQuizzes();
                        break;
                    case "CREATE_ROOM":
                        handleCreateRoom(request[1], request[2]);
                        break;
                    case "JOIN_ROOM":
                        handleJoinRoom(request[1], request[2]);
                        break;
                    case "START_QUIZ":
                        handleStartQuiz(request[1]);
                        break;
                    case "SUBMIT_ANSWER":
                        handleSubmitAnswer(request[1], request[2], request[3]);
                        break;
                    default:
                        out.println("ERROR: Invalid request.");
                        break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                clientSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public int getUserId() {
        return userId;
    }

    private void handleLogin(String username, String password) {
        try {
            String query = "SELECT user_id FROM users WHERE username = ? AND password = ?";
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, username);
            stmt.setString(2, password);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                userId = rs.getInt("user_id");
                out.println("LOGIN_SUCCESS:" + userId);
            } else {
                out.println("LOGIN_FAILED");
            }
        } catch (SQLException e) {
            out.println("ERROR: Failed to process login.");
            e.printStackTrace();
        }
    }

    private void handleCreateQuiz(String quizName, String userId) {
        try {
            int createdBy = Integer.parseInt(userId);
            Quiz quiz = new Quiz(0, quizName, createdBy); // quizId will be generated by the database

            String query = "INSERT INTO quizzes (quiz_name, created_by) VALUES (?, ?)";
            PreparedStatement stmt = connection.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
            stmt.setString(1, quiz.getQuizName());
            stmt.setInt(2, quiz.getCreatedBy());
            stmt.executeUpdate();

            ResultSet rs = stmt.getGeneratedKeys();
            if (rs.next()) {
                quiz.setQuizId(rs.getInt(1));
                out.println("QUIZ_CREATED:" + quiz.getQuizId());
            }
        } catch (SQLException e) {
            out.println("ERROR: Failed to create quiz.");
            e.printStackTrace();
        }
    }

    private void handleGetQuizzes() {
        try {
            String query = "SELECT quiz_id, quiz_name, created_by FROM quizzes";
            PreparedStatement stmt = connection.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            StringBuilder quizzes = new StringBuilder();
            while (rs.next()) {
                Quiz quiz = new Quiz(rs.getInt("quiz_id"), rs.getString("quiz_name"), rs.getInt("created_by"));
                quizzes.append(quiz.getQuizId()).append(",")
                        .append(quiz.getQuizName()).append(",")
                        .append(quiz.getCreatedBy()).append(";");
            }
            out.println("QUIZZES:" + quizzes.toString());
        } catch (SQLException e) {
            out.println("ERROR: Failed to fetch quizzes.");
            e.printStackTrace();
        }
    }

    private void handleCreateRoom(String roomName, String quizId) {
        try {
            int quizIdInt = Integer.parseInt(quizId);
            Room room = new Room(0, roomName, quizIdInt, userId); // roomId will be generated by the database

            String query = "INSERT INTO rooms (room_name, quiz_id, created_by) VALUES (?, ?, ?)";
            PreparedStatement stmt = connection.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
            stmt.setString(1, room.getRoomName());
            stmt.setInt(2, room.getQuizId());
            stmt.setInt(3, room.getCreatedBy());
            stmt.executeUpdate();

            ResultSet rs = stmt.getGeneratedKeys();
            if (rs.next()) {
                room.setRoomId(rs.getInt(1));
                RoomManager roomManager = new RoomManager(room.getRoomId());
                QuizServer.addRoomManager(room.getRoomId(), roomManager);
                out.println("ROOM_CREATED:" + room.getRoomId());
            }
        } catch (SQLException e) {
            out.println("ERROR: Failed to create room.");
            e.printStackTrace();
        }
    }

    private void handleJoinRoom(String roomId, String userId) {
        this.roomId = Integer.parseInt(roomId);
        RoomManager roomManager = QuizServer.getRoomManager(this.roomId);
        if (roomManager != null) {
            roomManager.addClient(this);
            out.println("JOINED_ROOM:" + roomId);
        } else {
            out.println("ROOM_NOT_FOUND");
        }
    }

    private void handleStartQuiz(String quizId) {
        try {
            String query = "SELECT * FROM questions WHERE quiz_id = ?";
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setInt(1, Integer.parseInt(quizId));
            ResultSet rs = stmt.executeQuery();

            StringBuilder questions = new StringBuilder();
            while (rs.next()) {
                questions.append(rs.getString("question_text")).append(",")
                        .append(rs.getString("option1")).append(",")
                        .append(rs.getString("option2")).append(",")
                        .append(rs.getString("option3")).append(",")
                        .append(rs.getString("option4")).append(",")
                        .append(rs.getString("correct_answer")).append(";");
            }
            RoomManager roomManager = QuizServer.getRoomManager(roomId);
            if (roomManager != null) {
                roomManager.broadcast("QUESTIONS:" + questions.toString());
            }
        } catch (SQLException e) {
            out.println("ERROR: Failed to start quiz.");
            e.printStackTrace();
        }
    }

    private void handleSubmitAnswer(String userId, String quizId, String score) {
        try {
            Result result = new Result(0, Integer.parseInt(userId), Integer.parseInt(quizId), Integer.parseInt(score));

            String query = "INSERT INTO results (user_id, quiz_id, score) VALUES (?, ?, ?)";
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setInt(1, result.getUserId());
            stmt.setInt(2, result.getQuizId());
            stmt.setInt(3, result.getScore());
            stmt.executeUpdate();
            out.println("RESULT_SAVED");
        } catch (SQLException e) {
            out.println("ERROR: Failed to submit answer.");
            e.printStackTrace();
        }
    }

    public void sendMessage(String message) {
        out.println(message);
    }
}